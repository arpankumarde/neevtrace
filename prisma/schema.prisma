generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  MANUFACTURER
  LOGISTICS
  SUPPLIER
}

enum DocumentType {
  CIIPL
  ISO
  BIS
  ROHS
  GST_CERTIFICATE
  PAN_CARD
  TRADE_LICENSE
  INCORPORATION_CERTIFICATE
  BANK_STATEMENT
  ADDRESS_PROOF
}

enum DocumentStatus {
  PENDING
  APPROVED
  REJECTED
}

enum BatchStatus {
  CREATED
  IN_PRODUCTION
  QUALITY_CHECK
  COMPLETED
  SHIPPED
  IN_TRANSIT
  DELIVERED
  RECALLED
}

enum ShipmentStatus {
  PENDING
  IN_TRANSIT
  DELIVERED
  CANCELLED
}

enum WaypointStatus {
  PENDING
  IN_TRANSIT
  ARRIVED
  DEPARTED
  COMPLETED
}

enum BiddingStatus {
  OPEN
  CLOSED
  AWARDED
  CANCELLED
}

enum BidStatus {
  PENDING
  ACCEPTED
  REJECTED
  WITHDRAWN
}

enum LogisticsBidStatus {
  PENDING
  ACCEPTED
  REJECTED
  WITHDRAWN
}

model Manufacturer {
  id                 String            @id @default(uuid())
  userId             String            @unique
  name               String            @default("Unknown Manufacturer")
  email              String            @unique
  phone              String?
  address            String?
  city               String?
  state              String?
  country            String?
  pincode            String?
  registrationNumber String            @unique
  website            String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  productionCapacity Int?
  certifications     String[] // Array of certification names
  specializations    String[] // Types of products manufactured
  companyDocName     String?
  companyDocUrl      String?
  certDocName        String?
  certDocUrl         String?
  // Relationships
  batches            Batch[]
  materialRequests   MaterialRequest[]
}

model Supplier {
  id                 String        @id @default(uuid())
  userId             String        @unique
  name               String
  email              String        @unique
  phone              String?
  address            String?
  city               String?
  state              String?
  country            String?
  pincode            String?
  registrationNumber String        @unique
  website            String?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  suppliedProducts   String[]
  minOrderValue      Decimal?
  paymentTerms       String?
  leadTime           Int?
  bids               SupplierBid[]
}

model Logistics {
  id                 String         @id @default(uuid())
  userId             String         @unique
  name               String
  email              String         @unique
  phone              String?
  address            String?
  city               String?
  state              String?
  country            String?
  pincode            String?
  registrationNumber String         @unique
  website            String?
  designation        String?
  fleetSize          Int?
  serviceAreas       String[]
  transportTypes     String[]
  warehouseCapacity  Int?
  logisticsBids      LogisticsBid[] // Logistics can bid on multiple batches
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  Waypoint           Waypoint[]
}

model Batch {
  id                     String               @id @default(uuid())
  batchNumber            String               @unique // Remove the default, we'll generate it manually
  productName            String
  productCode            String?
  description            String?
  quantity               Int
  unit                   String?
  manufacturerId         String
  status                 BatchStatus          @default(CREATED)
  qualityGrade           String?
  testResults            Json?
  storageTemp            String?
  handlingNotes          String?
  expiryDate             DateTime?
  destinationAddress     String?
  selectedLogisticsBidId String?              @unique // Only one logistics provider selected
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  // Relationships
  manufacturer           Manufacturer         @relation(fields: [manufacturerId], references: [id])
  materialRequests       MaterialRequest[]
  complianceDocuments    ComplianceDocument[]
  logisticsBids          LogisticsBid[] // Multiple logistics providers can bid
  selectedLogisticsBid   LogisticsBid?        @relation("SelectedLogisticsBid", fields: [selectedLogisticsBidId], references: [id])
  Waypoint               Waypoint[]
}

model ComplianceDocument {
  id                String       @id @default(uuid())
  batchId           String
  type              DocumentType
  documentUrl       String
  expiryDate        DateTime?
  issuer            String?
  remarks           String?
  certificateNumber String?
  testReportNumber  String?
  uploadedAt        DateTime     @default(now())
  batch             Batch        @relation(fields: [batchId], references: [id], onDelete: Cascade)
}

model AuditLog {
  id         String   @id @default(uuid())
  entityType String // "batch", "shipment", "document", etc.
  entityId   String
  action     String // "created", "updated", "deleted", "approved", etc.
  userId     String
  userRole   UserRole
  changes    Json? // Store the changes made
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())
}

model MaterialRequest {
  id               String        @id @default(uuid())
  batchId          String
  manufacturerId   String
  materialName     String
  description      String?
  quantity         Int
  unit             String?
  budgetRange      String?
  specifications   Json?
  status           BiddingStatus @default(OPEN)
  selectedBidId    String?       @unique
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  closingDate      DateTime
  // Quality requirements
  qualityStandards String[]
  certificationReq String[]
  // Relationships
  batch            Batch         @relation(fields: [batchId], references: [id])
  manufacturer     Manufacturer  @relation(fields: [manufacturerId], references: [id])
  bids             SupplierBid[]
  selectedBid      SupplierBid?  @relation("SelectedBid", fields: [selectedBidId], references: [id])
}

model SupplierBid {
  id                String    @id @default(uuid())
  materialRequestId String
  supplierId        String
  bidPrice          Decimal
  deliveryTimeline  Int // Days
  proposedDate      DateTime
  validUntil        DateTime
  status            BidStatus @default(PENDING)
  remarks           String?
  certifications    String[]
  complianceDocUrls String[]
  paymentTerms      String?
  warrantyPeriod    Int?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relationships
  materialRequest MaterialRequest  @relation(fields: [materialRequestId], references: [id])
  supplier        Supplier         @relation(fields: [supplierId], references: [id])
  selectedFor     MaterialRequest? @relation("SelectedBid")

  @@unique([materialRequestId, supplierId])
}

model LogisticsBid {
  id              String             @id @default(uuid())
  batchId         String
  logisticsId     String
  bidPrice        Int
  estimatedTime   Int // Estimated delivery time in hours
  pickupDate      DateTime
  deliveryDate    DateTime
  vehicleType     String // Truck, Container, etc.
  capacity        String // Weight/volume capacity
  route           String? // Suggested route
  specialHandling String? // Temperature controlled, fragile, etc.
  insurance       Boolean            @default(false)
  status          LogisticsBidStatus @default(PENDING)
  remarks         String?
  pros            String?
  cons            String?
  emission        String? // Estimated CO2 emissions
  validUntil      DateTime?
  submittedAt     DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  batch           Batch              @relation(fields: [batchId], references: [id])
  logistics       Logistics          @relation(fields: [logisticsId], references: [id])
  selectedFor     Batch?             @relation("SelectedLogisticsBid")

  @@unique([batchId, logisticsId]) // One bid per logistics provider per batch
}

model Waypoint {
  id               String         @id @default(uuid())
  batchId          String
  logisticsId      String
  sequence         Int
  address          String
  modeOfTransport  String?
  estimatedArrival DateTime?
  actualArrival    DateTime?
  status           WaypointStatus @default(PENDING)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  batch            Batch          @relation(fields: [batchId], references: [id])
  logistics        Logistics      @relation(fields: [logisticsId], references: [id])
}
